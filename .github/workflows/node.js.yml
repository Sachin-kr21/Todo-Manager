name: CI/CD Integration

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  validate-code:
    name: Code validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies
        run: npm install

      - name: Run linting
        run: npm run lint || exit 1  

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: validate-code
    env:
      TEST_DB_URL: ${{ secrets.TEST_DB_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: |
          npm test || exit 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Deploy using ssh
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd www/Todo-Manager
            echo "Current directory: $(pwd)"
            git pull origin master
            git status
            npm install --only=prod || exit 1  

  notify-discord:
    name: Notify Discord
    runs-on: ubuntu-latest
    needs : [deploy]
    if: always()
    steps:
      - name: Check test status
        id: check_test_status
        run: echo ::set-output name=status::failure
        if: failure()

      - name: Check validation status
        id: check_validation_status
        run: echo ::set-output name=status::failure
        if: failure()

      - name: Check deployment status
        id: check_deploy_status
        run: echo ::set-output name=status::failure
        if: failure()

      - name: Send Discord notification
        if: steps.check_test_status.outputs.status == 'failure' || steps.check_validation_status.outputs.status == 'failure' || steps.check_deploy_status.outputs.status == 'failure'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "username": "CI/CD Bot",
            "avatar_url": "https://example.com/avatar.png",
            "content": "CI/CD Pipeline Results",
            "embeds": [
              {
                "title": "CI/CD Pipeline Failure",
                "description": "One or more jobs in the CI/CD pipeline have failed.",
                "color": 16711680
              }
            ]
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}
